## sampler of q^vol random tilings (inverting q)
## code by E. Zhang and L. Petrov (2019)

import random
import numpy as np
import time

#################
# Initial plane partitions produces by Vadim Gorin's sampler (https://www.mccme.ru/~vadicgor/research.html)
#################

plane_partition_from_VG=[[10,10,10,10,10,10,10,10, 9, 9],[10,10,10,10,10,10,10,10, 8, 7],[10,10,10,10,10,10,10,10, 8, 6],[10,10,10,10,10,10,10,10, 8, 5],[10,10,10,10,10, 9, 9, 9, 8, 5],[10,10,10,10, 9, 9, 9, 8, 8, 3],[10,10,10,10, 9, 9, 7, 7, 6, 3],[10,10,10,10, 9, 7, 7, 6, 6, 3],[10,10,10, 9, 6, 6, 6, 5, 4, 1],[10,10, 6, 5, 5, 3, 3, 2, 2, 0]]
q=.85

# plane_partition_from
# q=0.7

# plane_partition_from_VG = [[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,48],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,48],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,49,49,48,47],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,49,49,48,47],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,49,48,47,47],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,49,47,47,47,46],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,48,47,47,47,46],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,49,49,49,48,47,47,47,45],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,49,49,49,48,47,45,44,43],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,49,49,49,48,47,45,44,41],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,49,49,48,48,45,45,43,41],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,49,49,49,49,48,46,45,45,42,41],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,49,49,49,49,45,44,44,43,41,41],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,49,49,49,49,45,44,43,42,40,40],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,49,49,48,47,44,44,43,41,40,39],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,49,49,48,48,48,48,47,44,44,43,41,40,39],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,49,49,49,48,48,48,47,47,44,44,43,41,39,39],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,49,49,49,48,48,47,47,47,44,43,43,40,39,38],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,49,49,48,48,48,47,46,45,44,43,43,40,39,38],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,49,49,48,48,48,47,46,45,43,43,43,40,39,37],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,49,49,49,49,48,48,48,46,45,43,43,42,41,40,39,37],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,49,49,49,49,49,49,49,48,48,46,46,45,42,41,41,40,39,39,37],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,49,49,49,49,49,49,49,48,48,46,46,43,42,41,41,40,38,38,37],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,49,49,48,48,48,48,48,48,48,46,46,43,41,41,41,40,38,38,36],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,49,49,49,48,48,48,48,48,48,48,46,46,41,41,40,40,40,38,38,36],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,49,49,49,48,48,48,48,47,47,46,45,45,41,41,40,40,38,38,37,33],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,49,49,49,48,48,48,48,47,47,45,45,44,41,41,40,40,37,37,35,33],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,49,49,49,48,48,48,48,47,47,45,43,42,41,41,40,38,37,37,34,33],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,49,49,49,49,48,47,47,47,47,46,45,43,42,41,41,39,38,36,36,34,33],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,49,49,49,49,48,47,47,45,45,45,45,44,43,41,41,41,39,38,35,32,30,28],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,49,49,49,49,49,48,47,47,47,47,45,45,44,44,43,42,41,41,41,38,37,31,30,30,26],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,49,49,49,49,48,48,47,47,47,47,45,44,44,43,42,42,41,40,40,38,34,31,30,29,25],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,49,49,49,49,48,47,47,46,46,45,45,44,44,43,42,42,40,39,36,36,33,31,30,29,24],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,49,49,49,49,49,49,49,49,49,47,47,47,45,45,45,45,44,44,43,42,42,40,39,35,35,33,31,29,24,24],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,49,49,49,49,49,49,48,48,46,46,45,45,45,45,45,44,44,44,43,41,41,39,38,35,34,33,31,28,24,22],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,49,49,49,49,49,48,48,47,47,46,46,45,45,45,45,44,43,42,42,41,40,40,38,37,35,30,30,29,27,21,19],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,49,49,48,48,48,47,47,47,46,46,45,45,45,45,45,44,43,42,42,40,40,40,37,33,31,30,30,27,25,21,19],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,49,49,49,48,48,48,47,47,46,45,45,45,45,45,44,44,44,43,41,40,40,40,38,37,33,31,29,26,26,23,20,19],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,49,49,48,48,48,48,48,48,48,47,47,46,45,44,44,43,43,43,42,42,41,41,39,39,39,37,37,32,29,29,25,25,23,18,18],[50,50,50,50,50,50,50,50,50,50,50,50,50,49,49,48,48,48,48,47,47,46,46,46,45,45,45,44,44,43,43,43,43,41,40,40,39,39,39,38,37,36,32,27,25,24,24,18,18,17],[50,50,50,50,50,50,50,50,50,50,50,49,49,49,49,48,48,48,48,47,47,46,46,45,45,45,45,43,43,42,42,41,41,39,39,38,36,36,36,36,35,33,31,25,25,21,20,17,16,11],[50,50,50,50,50,50,50,50,50,50,49,48,48,48,48,48,48,48,47,47,47,46,46,45,45,45,44,43,41,41,41,41,41,39,38,36,35,35,35,35,34,31,29,25,23,21,20,15,14,10],[50,50,50,50,50,50,50,50,50,50,49,48,48,47,47,47,46,46,45,45,45,45,45,44,43,43,43,43,40,39,39,39,39,39,37,35,35,33,31,30,29,29,26,24,22,21,16,14,10, 6],[50,50,50,50,50,50,50,50,50,49,49,48,47,46,46,46,46,45,45,45,45,43,42,42,42,42,42,42,40,38,38,38,37,37,36,34,34,33,28,27,27,27,24,23,19,16,16,10, 8, 5],[50,50,50,50,50,50,49,48,48,48,48,47,46,45,45,45,45,45,45,45,44,42,42,42,41,41,41,41,38,38,38,37,37,37,34,33,33,33,27,26,25,24,24,23,16,15,13,10, 2, 2],[50,50,50,49,49,48,48,48,48,48,47,46,46,45,45,45,45,45,43,42,40,40,40,40,40,40,38,38,35,35,34,34,34,32,32,31,28,27,27,24,23,22,21,20,16,13,11, 8, 2, 2],[50,50,49,49,49,48,48,48,48,47,47,46,45,45,45,45,45,45,43,41,39,39,38,38,38,35,35,33,33,33,32,31,31,27,27,27,26,25,23,22,22,22,18,16,16,11,11, 6, 2, 1],[50,49,47,47,47,47,47,47,46,44,44,44,43,43,41,41,41,41,40,38,38,38,38,34,34,33,32,32,31,31,31,29,29,27,27,25,23,21,21,20,20,19,15,10, 6, 5, 4, 4, 1, 1],[47,47,47,46,46,46,44,44,44,44,43,42,42,41,39,38,38,38,38,36,36,35,32,30,30,30,29,28,28,28,28,28,22,22,22,22,22,21,21,19,16,14,10,10, 6, 3, 2, 2, 1, 1]]
# q = 0.95

# plane_partition_from_VG = [[3,2,2],[2,2,1],[2,1,1]] # small example
# q=0.5

#################
# Initialization of lambda and some helpful functions
#################

n = 2*len(plane_partition_from_VG)
k = n/2 #half of size of interlacing array

la=np.zeros((n,n))

lambda_dynamic = np.zeros(( int(n * (n-1) / 2 + 1), n, n ))
global_time = 0

for i in range(n) :
    for j in range(i+1) :
        if i+1 > n/2 and j+1 <= i+1 - n/2 :
            la[i][j] = 0
        elif i+1 > n/2 and j+1 >= n/2 + 1 :
            la[i][j] = n/2
        else:
            la[i][j] = plane_partition_from_VG[int(n/2-j-1)][i-j]

# print la

# la(i,j); i=1,...,n; j=1,...,i and la(i,1) is the smallest part in lambda(i)

def lambda_get(la, i, j):
    # getting lambda values where i,j are from 1
    if i >= 1 and i <= n and j>=1 and j<=i :
        return la[i-1][j-1]
    else:
        return -1

def lambda_interlace(la):
    # return 0 if interlaces
    for i in range(n-1) :
        for j in range (i) :
            if lambda_get(la,i+1,j+1) >= lambda_get(la,i+2,j+1) and lambda_get(la,i+1,j+1) <= lambda_get(la,i+2,j+2) : 
                pass
            else :
                return -1
    return 0

# print lambda_interlace(la)


#################
# Assign spectral parameters
#################

spectral_parameters_array=[]
for x in range(1,n+1):
    spectral_parameters_array.append(q**(x-1))

def sp_get(spectral_parameters_array, i):
    # it is convenient to have spectral parameters at i=0,...,n-1
    if 0<=i and i<=n-1 :
        return spectral_parameters_array[i]
    else :
        return -1

def sp_ratio_get(spectral_parameters_array, i):
    if 1<=i and i<=n-1 : 
        return sp_get(spectral_parameters_array,i) / sp_get(spectral_parameters_array, i-1)
    else:
        return -1

#################
# The step of the Markov chain
#################

def L_lambda_modifier(m): #leftward process at row m=1,...,n-1 
    alpha = sp_ratio_get(spectral_parameters_array,m)
    # print(m, alpha)
    if alpha == -1 or alpha >= 1:
        return
    
    # swapping the spectral parameters
    tmp = spectral_parameters_array[m]
    spectral_parameters_array[m] = spectral_parameters_array[m-1]
    spectral_parameters_array[m-1] = tmp
    
    for j in range(1,m+1) :
        left_bound = max( lambda_get(la,m+1,j), lambda_get(la,m-1,j-1) )
        la[m-1][j-1] = left_bound + min( np.random.geometric(1-alpha) - 1 , lambda_get(la,m,j) - left_bound)
                
# ############################

# def R_lambda_modifier(m):
#     alpha = 1/sp_ratio_get(spectral_parameters_array,m)
#     # print(m, alpha)
#     if alpha == -1 or alpha >= 1:
#         return
    
#     # swapping the spectral parameters
#     tmp = spectral_parameters_array[m]
#     spectral_parameters_array[m] = spectral_parameters_array[m-1]
#     spectral_parameters_array[m-1] = tmp
    
#     for j in range(0,n): #go along the row to find lozenges
#         #if la[m][j] !=0: #there's a lozenge 
#             #print("try add at ", m,j)

#         if m>=k and j<k and m-k>=j:#lower left triangle of 0s
#             la[m][j]+=0
                
#         elif m==0 and j==0: #top left entry
#             add=1
#             possibleadd=[0] 
#             prob=[1] 
#             for i in range(0,2*n):
#                 if la[m][j]+add <= la[m+1][j+1] and la[m][j]+add >= la[m+1][j]:
#                     possibleadd.append(add)
#                     add+=1
#                 else:
#                     pass #question: pass or break?
#             maxmove=max(possibleadd) 
#             prob[0]=alpha**maxmove
#             for i in range(0,maxmove):
#                 prob.append((1-alpha)*alpha**(maxmove-(i+1)))
#             la[m][j] += np.random.choice(possibleadd,p=prob)
           
        
#         elif m==n-1: #bottom row
#             la[m][j]+=0
        
#         elif m==j: #diagonal
#             add=1
#             possibleadd=[0] 
#             prob=[1] 
#             for i in range(0,2*n):
#                 if la[m][j]+add >= la[m-1][j-1] and la[m][j]+add <= la[m+1][j+1] and la[m][j]+add >= la[m+1][j]:
#                     possibleadd.append(add)
#                     add+=1
#                 else:
#                     pass #question: pass or break?
#             maxmove=max(possibleadd) 
#             prob[0]=alpha**maxmove
#             for i in range(0,maxmove):
#                 prob.append((1-alpha)*alpha**(maxmove-(i+1)))
#             la[m][j] += np.random.choice(possibleadd,p=prob)
            
#         elif j==0: #left column
#             add=1
#             possibleadd=[0] 
#             prob=[1] 
#             for i in range(0,2*n):
#                 if la[m][j]+add <= la[m-1][j] and la[m][j]+add >= la[m+1][j] and la[m][j]+add <= la[m+1][j+1]:
#                     possibleadd.append(add)
#                     add+=1
#                 else:
#                     pass #question: pass or break?
#             maxmove=max(possibleadd) 
#             prob[0]=alpha**maxmove
#             for i in range(0,maxmove):
#                 prob.append((1-alpha)*alpha**(maxmove-(i+1)))
#             la[m][j] += np.random.choice(possibleadd,p=prob)
            
#         else:   
#             add=1
#             possibleadd=[0]
#             prob=[1] 
#             for i in range(0,2*n):
#                 if la[m][j]+add >= la[m-1][j-1] and la[m][j]+add <= la[m-1][j] and la[m][j]+add >= la[m+1][j] and la[m][j]+add <= la[m+1][j+1]:
#                     possibleadd.append(add)
#                     add+=1
#                 else:
#                     pass #question: pass or break?
#             maxmove=max(possibleadd) 
#             prob[0]=alpha**maxmove
#             for i in range(0,maxmove):
#                 prob.append((1-alpha)*alpha**(maxmove-(i+1)))
#             la[m][j] += np.random.choice(possibleadd,p=prob)
                
# ############################    

#################
# Writing functions
#################

def write_to_file(filename, la) :
    filename.write("{")
    for i in range(n):
        filename.write("{")
        for j in range(i+1):
            filename.write(str(int(la[i][i-j])) + ",")
        filename.write("},")
    filename.write("},")

def write_to_latex_file(latex_filename_string, la) :
    latex_file = open(latex_filename_string,"w")

    latex_file.write('\\documentclass{standalone}\n')
    latex_file.write('\\usepackage{tikz,amssymb}\n')
    latex_file.write('\\begin{document}\n')
    latex_file.write('\\begin{tikzpicture}[scale=1,thick]\n')
    latex_file.write('\\foreach \\pt in {')
    for i in range(n):
        for j in range(i+1):
            if i+1 > n/2 and j+1 <= i+1 - n/2 :
                pass
            elif i+1 > n/2 and j+1 >= n/2 + 1 :
                pass
            else:
                latex_file.write("(" + str(la[i][i-j]-j+i/2) + "," + str(i) + ")")

            if(i == n - 1 and j == i) or (i+1 > n/2 and j+1 >= n/2 + 1) or (i+1 > n/2 and j+1 <= i+1 - n/2):
                pass
            else:
                latex_file.write(",")
    latex_file.write('}\n')
    latex_file.write('    \\draw[fill,blue] \\pt --++ (.5*.9,.866025404*.9)--++(.5*.9,-.866025404*.9)--++(-.5*.9,-.866025404*.9)--cycle; \n')
    latex_file.write('\\end{tikzpicture}\n')
    latex_file.write('\\end{document}\n')
    latex_file.close()


def write_to_dynamic_array(la) :
    global global_time
    for i in range(n):
        for j in range(i+1):
            lambda_dynamic[global_time][i][i-j] = la[i][j]
    global_time += 1

#################
# Main loop: do the L maps to reverse all the spectral parameters, and print the results to the file
#################

filename = open("out-" + str(int(time.time())) + ".txt","w") 
filename.write("{")

write_to_file(filename, la)

tim = 0

for x in range (1,n+1):
    for j in range (1,n+1-x):
        L_lambda_modifier(j)
        write_to_file(filename, la)

        print(tim)
        # write_to_latex_file("tex" + str(tim).zfill(4) + ".tex", la)

        tim+=1

filename.write("}")
filename.close()

############################